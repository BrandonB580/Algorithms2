import random
import time

def mergesort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        mergesort(left_half)
        mergesort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

def quicksort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]

    return quicksort(left) + middle + quicksort(right)

if __name__ == '__main__':
    random.seed(42) # Set seed for reproducibility
    data = [random.randint(0, 1000) for _ in range(10000)]
    num_elements = len(data)

    print(f"Sorting {num_elements} elements using MergeSort...")
    start_time = time.time()
    mergesort(data)
    end_time = time.time()
    print(f"MergeSort took {end_time - start_time:.6f} seconds to sort the data")

    print(f"\nSorting {num_elements} elements using QuickSort...")
    start_time = time.time()
    quicksort(data)
    end_time = time.time()
    print(f"QuickSort took {end_time - start_time:.6f} seconds to sort the data")
